name: Deploy to Amazon EC2  #이름은 마음대로

on:
  push:
    branches:
      - main

# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: f2-server-cd-bucket
  CODE_DEPLOY_APPLICATION_NAME: f2-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: f2-server-code-deploy-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest    #linux서버인데 동일
    environment: production

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm i
    
    - name: build
      run: npm run build
      
    - name: Generate Environment Variables File for Production
      run: |
        touch .env.production
        echo "AIRTABLE_API_KEY=$AIRTABLE_API_KEY" >> .env.production
        echo "AIRTABLE_BASE_ID=$AIRTABLE_BASE_ID" >> .env.production
        echo "MAIL_SENDER_ID=$MAIL_SENDER_ID" >> .env.production
        echo "MAIL_SENDER_PW=$MAIL_SENDER_PW" >> .env.production
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        MAIL_SENDER_ID: ${{ secrets.MAIL_SENDER_ID }}
        MAIL_SENDER_PW: ${{ secrets.MAIL_SENDER_PW }}

    - name: Generate Environment Variables File for Production
      run: ls
    # - name: copy deploy script
    #   run: cp -f appspec.yml dist && cp -rf scripts dist
      
    # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
    #     aws-region: ${{ env.AWS_REGION }}

    # (5) 빌드 결과물을 S3 버킷에 업로드
    # - name: Upload to AWS S3
    #   run: |
    #     aws deploy push \
    #       --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
    #       --ignore-hidden-files \
    #       --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
    #       --source .
          
    # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    # - name: Deploy to AWS EC2 from S3
    #   run: |
    #     aws deploy create-deployment \
    #       --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
    #       --deployment-config-name CodeDeployDefault.AllAtOnce \
    #       --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
    #       --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip